import plotly.graph_objects as go
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial import distance
from sklearn.cluster import KMeans
import csv
import pywt
import math
from pyts.approximation import PiecewiseAggregateApproximation


df = pd.read_csv("https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv")


del df['AAPL.Open']
del df['direction']
del df['up']
del df['AAPL.Low']
del df['AAPL.Close']
del df['AAPL.Volume']
del df['AAPL.Adjusted']
del df['dn']
del df['mavg']
del df['Date']

def find_nearest(array, value, array2):
    array = np.asarray(array)
    idx = (np.abs(array - value)).argmin()
    if idx == 0:
        return array[idx], array[idx + 1], array2[idx], array2[idx + 1]
    if idx == len(array)-1:
        return array[idx-1], array[idx], array2[idx-1], array2[idx]
    if value > array[idx]:
        return array[idx], array[idx+1], array2[idx], array2[idx + 1]
    else:
        return array[idx-1], array[idx], array2[idx-1], array2[idx]

def findMax(x, y, sampleX, sampleY):
    maxdev = []
    curMax = [0, 0]
    sx1, sx2 = 0, 0
    for i in range(len(x)):
        if i > 0 and i > sx1 and i < sx2:
            line = m * x[i] + b
            dist = np.abs(line - y[i])
            if dist > curMax[0]:
                curMax = [dist, i]
            maxdev += [dist]
        else:
            sx1, sx2, sy1, sy2 = find_nearest(sampleX, x[i], sampleY)

            if (sx1 == sx2):
                print('equality error')
            m = (sy1 - sy2) / (sx1 - sx2)
            b = (sx1 * sy2 - sx2 * sy1) / (sx1 - sx2)
            line = m * x[i] + b
            dist = np.abs(line - y[i])
            if dist > curMax[0]:
                curMax = [dist, i]
            maxdev += [dist]
    return curMax

def findTotal(x, y, sampleX, sampleY):
    maxdev = []
    tot = 0
    curMax = [0, 0]
    sx1, sx2 = 0, 0
    for i in range(len(x)):
        if i > 0 and i > sx1 and i < sx2:
            line = m * x[i] + b
            dist = np.abs(line - y[i])
            if dist > curMax[0]:
                curMax = [dist, i]
            maxdev += [dist]
            tot += dist
        else:
            sx1, sx2, sy1, sy2 = find_nearest(sampleX, x[i], sampleY)

            if (sx1 == sx2):
                print('equality error')
            m = (sy1 - sy2) / (sx1 - sx2)
            b = (sx1 * sy2 - sx2 * sy1) / (sx1 - sx2)
            line = m * x[i] + b
            dist = np.abs(line - y[i])
            if dist > curMax[0]:
                curMax = [dist, i]
            maxdev += [dist]
            tot += dist
    return tot

def APCA(x, y, sampleX):
    APCArep = []
    APCAgraphY = []
    curInd = 1
    curSum = 0
    counter = 0
    for i in range(len(x)):
        if i < np.floor(sampleX[curInd]):
            counter += 1
            curSum += y[i]
        else:
            curInd += 1
            mean = curSum/counter
            APCArep += [(mean, i)]
            counter = 1
            curSum = y[i]
    curInd = 0
    for i in range(len(x)):
        if i <= APCArep[curInd][1]:
            APCAgraphY += [APCArep[curInd][0]]
        else:
            curInd += 1
            APCAgraphY += [APCArep[curInd][0]]
    return APCArep, APCAgraphY



def curveFitting(x, y, errorTol, numseg):
    length = len(x)
    sampleX = np.linspace(x[0], x[len(x)-1], int(numseg))
    sampleY = np.interp(sampleX, x, y)
    maxDev = findMax(x,y, sampleX, sampleY)

    if maxDev[1]+1 == length:
        print('call off too dangerous!!')
        return sampleX, sampleY
    if maxDev[1] == 0:
        print('call off too dangerous!!')
        return sampleX, sampleY
    if len(sampleX) < 2:
        print('call off too dangerous!!')
        return sampleX, sampleY

    if maxDev[0] > errorTol:
        segi = np.ceil(numseg * (maxDev[1]/length))
        segii = numseg - segi

        if segii == 0 or segii == 1:
            segii = 2
        if segi == 0 or segi == 1:
            segi = 2

        xi = x[:maxDev[1]]
        yi = y[:maxDev[1]]
        sxi = np.linspace(x[0], maxDev[1]-1, int(segi))
        syi = np.interp(sxi, xi, yi)

        xii = x[maxDev[1]+1:]
        yii = y[maxDev[1]+1:]
        sxii = np.linspace(maxDev[1]+1, x[len(x)-1], int(segii))
        syii = np.interp(sxii, xii, yii)

        curPoint = (maxDev[1], y[maxDev[1]])
        pointi = (sxi[-1], syi[-1])
        pointii = (sxii[0], syii[0])

        dist1 = distance.euclidean(curPoint,  pointi)
        dist2 = distance.euclidean(curPoint, pointii)

        if dist1 >= dist2:
            xii = np.insert(xii, 0, [x[maxDev[1]]])
            yii = np.insert(yii, 0, y[maxDev[1]])
        else:
            xi = np.append(xi, [x[maxDev[1]]])
            yi = np.append(yi, [y[maxDev[1]]])


        finalxi, finalyi = curveFitting(xi, yi, errorTol, segi)
        finalxii, finalyii = curveFitting(xii, yii, errorTol, segii)

        finalx = np.append(finalxi, finalxii)
        finaly = np.append(finalyi, finalyii)
        return finalx, finaly
    else:
        return sampleX, sampleY

def prepend(a1, a2):
    a2.extend(a1)
    a1 = a2
    return a1

def threshold(array, M):
    curMinMax = 0
    maxes = []
    for i in range(len(array)):
        curVal = abs(array[i])
        if curVal > curMinMax:
            if len(maxes) < M:
                maxes += [[curVal,i]]
            else:
                temp = min(maxes)
                maxes.remove(temp)
                maxes += [[curVal,i]]
                temp = min(maxes)
                curMinMax = temp[0]
    final = []
    indexes = []
    for i in range(len(maxes)):
        indexes += [maxes[i][1]]
    for i in range(len(array)):
        if i in indexes:
            final += [array[i]]
        else:
            final += [0]
    return final


def reconstruct(coeffs):
    reconst = []
    reconst.append(coeffs[0]+coeffs[1])
    reconst.append(coeffs[0]-coeffs[1])
    del coeffs[:2]
    while len(reconst) <= len(coeffs):
        length = len(reconst)
        temp = []
        for i in range(length):
            temp += [reconst[i] + coeffs[i]]
            temp += [reconst[i] - coeffs[i]]
        del coeffs[:length]
        reconst = temp
    return reconst


def DWT(array, M):
    length = len(array)
    topRes = math.log(length, 2)-1
    if not math.log(length, 2).is_integer():
        print("Length needs to be a power of 2")
        return []
    details = []
    newArray = []
    CurDetails = []
    for i in range(1, length, 2):
        cur = (array[i-1] + array[i])/2
        newArray += [cur]
        CurDetails += [(cur - array[i])/2**(topRes/2)]
    topRes -= 1
    details = prepend(details, CurDetails)
    CurDetails = []
    while len(newArray) != 1:
        temp = []
        for i in range(1, len(newArray), 2):
            cur = (newArray[i-1] + newArray[i])/2
            temp += [cur]
            CurDetails += [(cur - newArray[i])/2**(topRes/2)]
        topRes -= 1
        newArray = temp
        details = prepend(details, CurDetails)
        CurDetails = []
    Coeffs = prepend(details, newArray)
    keep = threshold(Coeffs, M)
    print('keep', keep)
    answer = reconstruct(keep)
    print('final', answer)
    return answer

x = []
y1 = []
y2 = []
micro = []

with open('ECGTime.csv', newline='') as csvfile:
    reader = csv.reader(csvfile, delimiter=',')
    for row in reader:
        x += [int(row[0])]
        y1 += [float(row[1])]
        y2 += [float(row[2])]
        micro += [[int(row[0]), float(row[1])]]



data = df.reset_index().values
xcol = data[:,0]
ycol = data[:,1]
#
# errorTol = 0.2
#
# test = [[0,7],[1,5],[2,5],[3,3],[4,3],[5,3],[6,4],[7,6]]
# test1 = [7,5,5,3,3,3,4,6]
#
# DWT(test1, 3)

# a = [35, -3, 16, 10, 8, -8, 0, 12]
# reconstruct(a)

#

errorTol = 8
answer = curveFitting(xcol, ycol, errorTol, 50)
print('max',findTotal(xcol, ycol, answer[0], answer[1]))
# print(findTotal(xcol, ycol, answer[0], answer[1]))
APCA = APCA(xcol, ycol, answer[0])
# print(len(answer[1]))

plt.plot(xcol, ycol, label="Tech Company Stock Price")
plt.plot(xcol, APCA[1], label="APCA Reconstruction")
# plt.plot(xcol, APCA[1], label="APCA Reconstruction")

plt.legend()
plt.show()



# errorTol = 0.5
# answer = curveFitting(x, y1, errorTol, 60)
# print('max', findTotal(x[:500], y1[:500], answer[0][:500], answer[1][:500]))
# APCA = APCA(x, y1, answer[0])
# plt.plot(x[:500], y1[:500], label="Original EKG")
# plt.plot(x[:500], APCA[1][:500],label="APCA Reconstructed EKG")
# plt.legend()
# plt.show()

y1 = np.array(y1)

#PAA
#
# y1paa = y1[:500]
#
# W_L = 5
# transformer = PiecewiseAggregateApproximation(window_size=W_L)
# # paa = transformer.transform(ycol.reshape(1, -1))
# paa = transformer.transform(y1paa.reshape(1, -1))
# paaX = []
# paa_graph = []
# paa_graphX = []
# for i in range(len(paa[0])):
#     if i == 0:
#         paa_graph += [paa[0][i]]
#         paa_graph += [paa[0][i + 1]]
#         curX = i * W_L
#         paa_graphX += [curX]
#         paa_graphX += [curX + W_L]
#     elif i != len(paa[0])-1:
#         paa_graph += [paa[0][i+1]]
#         paa_graph += [paa[0][i+1]]
#         curX = i*W_L
#         paa_graphX += [curX]
#         paa_graphX += [curX + W_L]
#     paaX += [i*W_L]
#
# maxdif = findMax(xcol, ycol, paa_graphX, paa_graph)
print('max', findTotal(x[:500], y1paa, paaX, paa[0]))
# plt.plot(x[:500], y1paa, label="Stock Market Price")
# plt.plot(paa_graphX, paa_graph,label="PAA Reconstruction")
# plt.legend()
# plt.show()



#pyts
#tslearn

